-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Algorithm to solve sudoku puzzles.
--   
--   Please see the README on Github at
--   <a>https://github.com/ob-fun-ws17/studienarbeit-sudoku-solver</a>
@package studienarbeit-sudoku-solver
@version 0.1.0.0


-- | Basic types and functions needed to represent a sudoku grid
module SudokuBase
type Value = Char  Value of a field in the sudoku grid
type Row a = [a]  A list that represents a row in a 'Matrix'
type Grid = Matrix Value  'Matrix' that represents a sudoku grid
type Matrix a = [Row a]  2D array
type Choices = [Value]  List of possible values a field could have

-- | Create list of rows
rows :: Matrix a -> [Row a]

-- | Create list of columns
cols :: Matrix a -> [Row a]

-- | Create list of boxes (<a>boxsize</a> x <a>boxsize</a>)
boxs :: Matrix a -> [Row a]

-- | Char values for all allowed numbers
values :: [Value]

-- | Size of sectors in a sudoku grid
boxsize :: Int


-- | Functions to read and write sudoku grids
module SudokuParser

-- | Extract <a>Grid</a> from specified file (see <i>README.md</i> for a
--   file format description)
parseFile :: FilePath -> IO Grid

-- | Creates human readable string representaion of a <a>Grid</a>
showGrid :: Grid -> String


-- | Collection of functions that check specific properties of a sudoku
--   grid or its' subcomponents
module SudokuAnalize

-- | Check if sudoku field is empty
empty :: Value -> Bool

-- | Check if an array contains only ONE component
single :: [a] -> Bool

-- | Check if sudoku grid is valid
valid :: Grid -> Bool

-- | A Matrix is complete if it only contains single choices
complete :: Matrix Choices -> Bool

-- | Either void or unsafe
blocked :: Matrix Choices -> Bool


-- | A collection of functions that return a somehow transformed sudoku
--   grid.
module SudokuTransform

-- | replaces empty fields with <a>Choices</a>.
choices :: Grid -> Matrix Choices

-- | Creates a list of matrices that mustn't be valid representing all
--   permutation of the input <i>(reduced by one dimension)</i>.
collapse :: Matrix [a] -> [Matrix a]

-- | Remove all invalid choices by checking rows columns and boxes of the
--   Sudoku grid.
prune :: Matrix Choices -> Matrix Choices


-- | This module contains the toplevel function to solve sudoku grids as
--   well as its' sub functions.
module SudokuSolver

-- | Tries to find a solution to a specified <a>Grid</a>
solve :: Grid -> [Grid]

module Samples
sampleGrid :: Grid
sampleGridSolved :: Grid
sampleGrid1 :: Grid
sampleGrid2 :: Grid
sampleGrid3 :: Grid
sampleGrid4 :: Grid
sampleChoicesPruned :: Matrix Choices
sampleChoicesInvalid :: Matrix Choices
sampleChoicesInconsistent :: Matrix Choices
sampleGridString :: [String]


-- | This module contains the toplevel function to solve sudoku grids as
--   well as its' sub functions.
--   
--   This implementation is deprecated (faster implementation can be found
--   in <a>solve</a>) and is only included for historical purpose.
module Attempt4

-- | Tries to find a solution to a specified <a>Grid</a>
solve :: Grid -> [Grid]
